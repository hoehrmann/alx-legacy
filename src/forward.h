void alx_process_one_input_class(struct alx_parser_state *const p,alx_input_class_id const input_class);
void alx_foo_one_vertex(struct alx_backtrace_state *const bt,alx_vertex const vertex);
ALX_INLINE void alx_foo_one_pos(struct alx_backtrace_state *const bt,alx_vertex_list_index const **const m_ptr);
void alx_indexed_push_back(struct alx_backtrace_state *const bt,struct alx_unordered_vertex_set *const src_set,struct alx_vertexp_pair const *const insertee);
ALX_INLINE void alx_ps_add_edge(struct alx_backtrace_state *const bt,alx_vertex const src,alx_vertex const dst,size_t const current_index);
void alx_backtrace_init(struct alx_parser_state *const p,struct alx_backtrace_state *const bt,struct alx_v32 *const vertex_index,struct alx_v32 *const edges,alx_offset const dst_pos,struct alx_unordered_vertex_set const *const dst_set,bool const unskippables);
void alx_backtrace_swap(struct alx_backtrace_state *const bt);
void alx_backtrace_one_index(struct alx_backtrace_state *const bt,struct alx_vertexp const *const src,alx_vertex_list_index const **const m_ptr,size_t *const current_index);
void alx_backtrace_p(struct alx_parser_state *const p,struct alx_v32 *const vertex_index,struct alx_v32 *const edges,struct alx_vertexp const *const src,alx_offset const dst_pos,struct alx_unordered_vertex_set const *const dst_set,alx_vertex_list_index const *m_ptr,bool const unskippables);
void alx_backtrace(struct alx_parser_state *const p,struct alx_v32 *const vertex_index,struct alx_v32 *const edges,struct alx_vertexp const *const src,struct alx_vertexp const *const dst,alx_vertex_list_index const *m_ptr,bool const unskippables);
void alx_backtrace_add_candidates(struct alx_parser_state const *const p,alx_vertex_list_index const six,struct alx_unordered_vertex_set *const result);
void alx_backtrace_from_failure(struct alx_parser_state *const p,struct alx_v32 *const vertex_index,struct alx_v32 *const edges);
alx_collapse_node_ix alx_backtrace_index_final_ix(struct alx_v32 const *const vertex_index);
bool alx_handle_if(struct alx_parser_state *const p,struct alx_graph *const q,struct alx_graph_quad const *const candidate_indices,bool const assume_exclusion_failed);
bool alx_handle_triple(struct alx_parser_state *const p,struct alx_graph *const q,struct alx_graph_quad const *const candidate_indices,bool const assume_exclusion_failed);
void alx_handle_new_exteriors(struct alx_parser_state *const p,struct alx_graph *const q,bool *const changed_at_all,uint32_t const round,struct alx_vertexp_quad const *const tmp,struct alx_graph_quad const *const tmp_indices,struct alx_v32 *const cexclusions);
void alx_handle_single(struct alx_parser_state *const p,struct alx_graph *const q,uint32_t const src_ix,uint32_t const dst_ix,bool *const changed_at_all,uint32_t const round,bool const assume_exclusion_failed,struct alx_v32 *const cexclusions);
void alx_handle_cexclusions(struct alx_parser_state *const p,struct alx_graph *const q,bool *const changed_at_all,uint32_t const round,struct alx_v32 *const cexclusions);
void alx_finish_forest_init(struct alx_parser_state *const p,struct alx_graph *const q,struct alx_v32 *const cexclusions);
void alx_finish_forest(struct alx_parser_state *const p,struct alx_graph *const q,struct alx_v32 *const csiblings,struct alx_v32 *const cexclusions);
bool alx_log_matches_graph(struct alx_parser_state const *const p,struct alx_graph const *const q);
void alx_bottom_up(struct alx_parser_state *const p,struct alx_graph *const q);
void alx_process_file(struct alx_parser_state *const p);
void alx_cmd_print_help(char const *const program_name);
void alx_cmdline_add_omit(struct alx_cmd_args *const args,char const *const value);
struct alx_cmd_args alx_parse_cmd_args(int const argc,char const *const argv[]);
void alx_cmdline_release(struct alx_parser_state *const p);
void alx_cmdline_query(struct alx_parser_state *const p,struct alx_cmd_args const *const args);
void alx_cmdline_generate_random(struct alx_parser_state *const p,struct alx_cmd_args const *const args);
void alx_cmdline_main_backtrace(struct alx_parser_state *const p,struct alx_cmd_args const *const args,struct alx_vertexp const *const src_point,struct alx_vertexp const *const dst_point);
void alx_cmdline_all_edges_backtrace(struct alx_parser_state *const p,struct alx_cmd_args const *const args,struct alx_vertexp const *const src_point,struct alx_vertexp const *const dst_point);
void alx_cmdline_parse(struct alx_parser_state *const p,struct alx_cmd_args const *const args);
bool alx_cmdline_bad_args(struct alx_cmd_args const *const args);
int main(int const argc,char const *const argv[]);
bool alx_collapse_is_removable(struct alx_collapse const *const collapse,alx_collapse_node_ix const src_ix,alx_collapse_node_ix const dst_ix,alx_collapse_round const round,bool *const blocked);
void alx_collapse_single(struct alx_collapse *const collapse,alx_collapse_node_ix const src_ix,alx_collapse_node_ix const dst_ix,alx_collapse_round const round);
ALX_INLINE void alx_collapse_merge_p(struct alx_collapse *const collapse,struct alx_v32 const *const edges,size_t *const ix_ptr,alx_collapse_node_ix const dst_ix);
void alx_collapse_merge(struct alx_collapse *const collapse,uint32_t const round,size_t *const new_edge_count);
void alx_collapse_loop(struct alx_collapse *const collapse);
void alx_collapse_collapse(struct alx_collapse *const collapse,struct alx_v32 *const edges_in,struct alx_v32 *const edges_out);
void alx_collapse_clear(struct alx_collapse *const collapse);
uint32_t alx_collapse_get_position(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix);
uint32_t alx_collapse_get_node_index(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix);
alx_collapse_round alx_collapse_get_seen_as_src(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix);
uint32_t alx_collapse_get_lastmod(struct alx_collapse const *const collapse,alx_collapse_node_ix const node_ix);
void alx_collapse_set_lastmod(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix,alx_collapse_round const round);
void alx_collapse_set_node_index(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix,uint32_t const value);
void alx_collapse_set_position(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix,uint32_t const index);
void alx_collapse_set_seen_as_src(struct alx_collapse *const collapse,alx_collapse_node_ix const node_ix,alx_collapse_round const round);
void alx_collapse_init(struct alx_collapse *const collapse,struct alx_v32 const *const in_edges);
struct alx_vertexp alx_collapse_vertexp_from_node_ix(struct alx_collapse const *const collapse,alx_collapse_node_ix const node_ix);
void alx_collapse_export(struct alx_collapse *const collapse,struct alx_v32 *const dst);
int alx_cmp_uint32(uint32_t const lhs,uint32_t const rhs);
int alx_cmp_uint32_ts(void const *const a,void const *const b,char const *const orderby);
int alx_cmp_uint32_ts_0a3a(void const *const a,void const *const b);
int alx_cmp_uint32_ts_0a(void const *const a,void const *const b);
int alx_cmp_uint32_ts_0d(void const *const a,void const *const b);
int alx_cmp_uint32_ts_2d3d0d1d(void const *const a,void const *const b);
int alx_cmp_uint32_ts_2d3d(void const *const a,void const *const b);
int alx_cmp_uint32_ts_2a3a(void const *const a,void const *const b);
int alx_cmp_uint32_ts_0a1a(void const *const a,void const *const b);
int alx_cmp_uint32_ts_0d1d(void const *const a,void const *const b);
int alx_cmp_uint32_ts_1d0d(void const *const a,void const *const b);
int alx_cmp_uint32_ts_1d0a(void const *const a,void const *const b);
int alx_cmp_uint32_ts_0a1a2a3a(void const *const a,void const *const b);
int alx_vertexp_quad_cmp_special(void const *const lhs,void const *const rhs);
int alx_cexclusions_cmp(void const *const lhs,void const *const rhs);
void alx_shadowed_inputs_cursor_reset(struct alx_shadowed_inputs_cursor *const cursor,struct alx_v32 const *const shadowed_inputs);
void alx_shadowed_inputs_cursor_move_to(struct alx_shadowed_inputs_cursor *const cursor,struct alx_v32 const *const shadowed,alx_offset const to);
extern struct alx_grammar const global_grammar;
size_t alx_grammar_name_length_max_bytes(struct alx_grammar const *const grammar);
alx_vertex alx_grammar_min_vertex(struct alx_grammar const *const grammar);
alx_vertex alx_grammar_max_vertex(struct alx_grammar const *const grammar);
alx_vertex alx_grammar_start_vertex(struct alx_grammar const *const grammar);
alx_vertex alx_grammar_final_vertex(struct alx_grammar const *const grammar);
bool alx_gv_is_push(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_pop(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_if(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_if1(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_if2(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_fi2(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_fi(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_irregular(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_linear(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_skippable(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_input(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_conjunction(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_ordered_conjunction(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_ordered_choice(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_exclusion(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_exclusion_if(struct alx_grammar const *const grammar,alx_vertex const vertex);
bool alx_gv_is_exclusion_if1(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_topological_id alx_gv_topo(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex alx_gv_p1(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex alx_gv_p2(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex alx_gv_partner(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex alx_gv_one_in_loop(struct alx_grammar const *const grammar,alx_vertex const vertex);
char const *alx_gv_type(struct alx_grammar const *const grammar,alx_vertex const vertex);
char const *alx_gv_name(struct alx_grammar const *const grammar,alx_vertex const vertex);
char const *alx_gv_self_loop(struct alx_grammar const *const grammar,alx_vertex const vertex);
char const *alx_gv_contents_self_loop(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex const *alx_gv_shadows_vlptr(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex const *alx_gv_unskippable_shadows_vlptr(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex const *alx_gv_successors_vlptr(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex const *alx_gv_unskippable_predecessors_vlptr(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex const *alx_gv_old_predecessors_vlptr(struct alx_grammar const *const grammar,alx_vertex const vertex);
alx_vertex const *alx_grammar_vlix_to_vlptr(struct alx_grammar const *const grammar,alx_vertex_list_index const offset);
alx_nfa_state_id alx_grammar_nfa_next_state(struct alx_grammar const *const grammar,alx_vertex const prev_state,alx_input_class_id const input_class);
struct alx_if_group alx_gv_if_group(struct alx_grammar const *const grammar,alx_vertex const if_vertex);
bool alx_vertexp_pair_is_pushpush(struct alx_grammar const *const g,struct alx_vertexp_pair const *const pair);
bool alx_vertexp_pair_is_poppop(struct alx_grammar const *const g,struct alx_vertexp_pair const *const pair);
bool alx_vertexp_pair_is_poppush(struct alx_grammar const *const g,struct alx_vertexp_pair const *const pair);
bool alx_vertexp_pair_is_pushpush_or_poppop(struct alx_grammar const *const g,struct alx_vertexp_pair const *const pair);
bool alx_vertexp_quad_is_poppush(struct alx_grammar const *const g,struct alx_vertexp_quad const *const quad);
bool alx_vertexp_quad_is_pushpop(struct alx_grammar const *const g,struct alx_vertexp_quad const *const quad);
bool alx_vertexp_quad_is_parent_child(struct alx_grammar const *const g,struct alx_vertexp_quad const *const quad);
bool alx_vertexp_quad_is_siblings(struct alx_grammar const *const g,struct alx_vertexp_quad const *const quad);
bool alx_vertexp_quad_is_unbalanced_pushpop(struct alx_grammar const *const g,struct alx_vertexp_quad const *const quad);
bool alx_vertexp_pair_is_unbalanced_pushpop(struct alx_grammar const *const g,struct alx_vertexp_pair const *const pair);
alx_utf8_state alx_grammar_utf8_next_state(struct alx_grammar const *const grammar,alx_utf8_state const prev_state,uint8_t const byte);
struct alx_graph_quads_by_src alx_graph_quads_by_src(struct alx_graph const *const graph,alx_graph_node_ix const src_ix);
struct alx_graph_quads_by_dst alx_graph_quads_by_dst(struct alx_graph const *const graph,alx_graph_node_ix const dst_ix);
struct alx_graph_quads_by_any alx_graph_quads_by_any(struct alx_graph const *const graph);
struct alx_graph_quads_by_src alx_graph_quads_by_src_vertexp(struct alx_graph const *const graph,alx_offset const pos,alx_vertex const vertex,alx_graph_node_ix const ref_ix);
int alx_graph_quads_by_src_next(struct alx_graph const *const graph,struct alx_graph_quads_by_src *const iter);
int alx_graph_quads_by_dst_next(struct alx_graph const *const graph,struct alx_graph_quads_by_dst *const iter);
int alx_graph_quads_by_any_next(struct alx_graph const *const graph,struct alx_graph_quads_by_any *const iter);
struct alx_graph_quad alx_graph_quads_by_src_to_quad_indices(struct alx_graph const *const graph,struct alx_graph_quads_by_src const *const iter);
struct alx_graph_quad alx_graph_quads_by_dst_to_quad_indices(struct alx_graph const *const graph,struct alx_graph_quads_by_dst const *const iter);
struct alx_graph_quad alx_graph_quads_by_any_to_quad_indices(struct alx_graph const *const graph,struct alx_graph_quads_by_any const *const iter);
struct alx_vertexp_quad alx_graph_quads_by_src_to_quad(struct alx_graph const *const graph,struct alx_graph_quads_by_src const *const iter);
struct alx_vertexp_quad alx_graph_quads_by_dst_to_quad(struct alx_graph const *const graph,struct alx_graph_quads_by_dst const *const iter);
struct alx_vertexp_quad alx_graph_quads_by_any_to_quad(struct alx_graph const *const graph,struct alx_graph_quads_by_any const *const iter);
alx_graph_node_ix alx_graph_find_vertex(struct alx_graph const *const graph,alx_offset const pos,alx_vertex const vertex,alx_graph_node_ix const ref_ix);
alx_graph_node_ix alx_graph_find_vertex(struct alx_graph const *const graph,alx_offset const pos,alx_vertex const vertex,alx_graph_node_ix const ref_ix);
size_t alx_graph_node_size_in_uint32_ts();
void alx_graph_clear(struct alx_graph *const graph);
struct alx_graph_node alx_graph_node_from_ix(struct alx_graph const *const graph,alx_graph_node_ix const node_ix);
struct alx_vertexp_quad alx_graph_quad_indices_to_quad(struct alx_graph const *const graph,struct alx_graph_quad const *const quad);
struct alx_graph_quad alx_graph_quad_indices_from_link_ix(struct alx_graph const *const graph,alx_graph_link_ix const link_ix);
void alx_graph_node_set_predecessors(struct alx_graph *const graph,alx_graph_node_ix const node_ix,alx_graph_link_ix const predecessors_ix);
void alx_graph_node_set_successors(struct alx_graph *const graph,alx_graph_node_ix const node_ix,alx_graph_link_ix const successors_ix);
void alx_graph_node_set_lastmodified(struct alx_graph *const graph,alx_graph_node_ix const node_ix,alx_graph_lastmod const lastmod);
void alx_graph_node_set_pending(struct alx_graph *const graph,alx_graph_node_ix const node_ix,alx_graph_pending const pending);
bool alx_graph_has_pair(struct alx_graph *const graph,alx_offset const src_pos,alx_vertex const src_vertex,alx_graph_node_ix const src_ref_ix,alx_offset const dst_pos,alx_vertex const dst_vertex,alx_graph_node_ix const dst_ref_ix);
int alx_graph_quad_indices_memcmp(void const *const lhs,void const *const rhs);
bool alx_graph_has_quad_indices(struct alx_graph const *const graph,struct alx_graph_quad const *const needle);
bool alx_graph_has_quad_exteriors(struct alx_graph const *const graph,struct alx_graph_quad const *const needle);
void alx_graph_insert_quad(struct alx_graph *const graph,struct alx_graph_quad const *const quad,bool *const changed,alx_graph_lastmod const lastmod);
void alx_graph_push_back_node(struct alx_graph *const graph,struct alx_graph_node const *const node);
void alx_graph_init_from_edges(struct alx_graph *const graph,struct alx_v32 const *const index,struct alx_v32 const *const edges);
void alx_graph_to_siblings_and_exclusions(struct alx_graph *const graph,struct alx_v32 *const siblings);
void alx_graph_to_edges(struct alx_graph *const graph,struct alx_v32 *const edges,bool const only_pending);
bool alx_graph_omit_quad(struct alx_graph const *const graph,struct alx_graph_quad const *const indices,struct alx_vertexp_quad const *const quad);
void alx_graph_remove_quad_p(struct alx_graph *const graph,alx_graph_node_ix const node_ix,alx_graph_quad_ix const removee_ix,size_t const foo_ix);
void alx_graph_remove_quad(struct alx_graph *const graph,alx_graph_quad_ix const removee_ix);
void alx_graph_cleanup_ordered_choices(struct alx_graph *const graph);
struct alx_log_context alx_log_get_context(struct alx_parser_state const *const p,char const *const file,char const *const func,size_t const line);
void alx_log_memory_p(struct alx_log_context const ctx,struct alx_parser_state const *const p);
void alx_log_quad_p(struct alx_log_context const ctx,char const *const prefix,struct alx_vertexp_quad const *const quad);
void alx_log_pair_p(struct alx_log_context const ctx,char const *const prefix,struct alx_vertexp_pair const *const pair);
void alx_log_graph_node_p(struct alx_log_context const ctx,char const *const prefix,struct alx_graph_node const *const node);
void alx_logf_p(struct alx_log_context const ctx,...);
void alx_unused(void const *const value);
void alx_dbg_break(void);
bool alx_starts_with(char const *const string,char const *const prefix);
int alx_rng_minmax(struct alx_rng *const rng,int const min,int const max);
void alx_ps_longjmp(struct alx_parser_state const *const p,int code);
struct alx_vertexp_pair alx_ps_get_endpoints(struct alx_parser_state const *const p);
void alx_parser_state_memrealloc(struct alx_parser_state *const p,void **const ptr,size_t const new_size);
void alx_parser_state_memfree(struct alx_parser_state *const p,void *const ptr);
struct alx_grammar const *alx_g(struct alx_parser_state const *const p);
void alx_random_path_compute_endpoints(struct alx_parser_state *const p,struct alx_v32 const *const path,struct alx_v32 *const stack,struct alx_v32 *const endpoints);
void alx_random_path_json(struct alx_parser_state *const p,struct alx_v32 const *const path,struct alx_v32 *const endpoints,struct alx_v32 *const json_stack,struct alx_string *const string);
void alx_random_flat_path(struct alx_parser_state *const p,alx_vertex_index_ix const src_ix,alx_vertex_index_ix const dst_ix,struct alx_v32 const *const vertex_index,struct alx_v32 const *const sorted_edges,struct alx_v32 *const full_path);
void alx_random_full_path(struct alx_parser_state *const p,struct alx_graph const *const graph);
uint32_t const *alx_random_quad_path_step_p(struct alx_parser_state *const p,struct alx_graph const *const graph,struct alx_v32 const *const sorted_quads,alx_graph_node_ix const src_ix,alx_graph_node_ix const dst_ix,struct alx_graph_quad *const found,bool *const is_pop);
void alx_random_quad_path_step(struct alx_parser_state *const p,struct alx_graph const *const graph,struct alx_v32 const *const sorted_quads,alx_graph_node_ix const src_ix,alx_graph_node_ix const dst_ix,struct alx_v32 *const path);
void alx_random_quad_path(struct alx_parser_state *const p,struct alx_graph const *const graph,struct alx_v32 *const tmp,struct alx_v32 *const path);
void alx_sqldump_dump_file_contents(struct alx_parser_state const *const p,sqlite3 *const db);
void alx_sqldump_check_rc_p(struct alx_log_context const ctx,struct alx_parser_state const *const p,sqlite3 *const db,sqlite3_stmt *const sth,int const got,int const expected);
void alx_sqldump_insert_vector(struct alx_parser_state const *const p,sqlite3 *const db,sqlite3_stmt *const sth,struct alx_v32 const *const vector,size_t const start_index,size_t const size,size_t const items_per_row);
void alx_sqldump_dump_parser_properties(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_vertex_properties(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_grammar_properties(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_vertex_list_items(struct alx_parser_state const *const p,sqlite3 *db,sqlite3_stmt *const sth,alx_vertex const vertex,alx_vertex_list_index const first);
void alx_sqldump_dump_old_edge(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_vertex_shadows(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_grammar(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_shadowed_inputs(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_vectors(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_postdata(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_dump_parser_state(struct alx_parser_state const *const p,char const *const db_path);
void alx_sqlquery_cmdline_args_to_table(struct alx_parser_state const *const p,sqlite3 *const db);
void alx_sqlquery_dotbounds(char const *const fst_start,char const **const fst_after,char const **const snd_start,char const **const snd_after);
char const *alx_sqlquery_deploy_data_views(struct alx_parser_state const *const p,sqlite3 *const db);
void alx_sqlquery_plain(struct alx_parser_state const *const p,sqlite3 *const db,sqlite3_stmt *const sth);
void alx_sqlquery_something(struct alx_parser_state const *const p,char const *const db_path);
void alx_sqldump_deploy_views(struct alx_parser_state const *const p,sqlite3 *db);
void alx_sqldump_deploy_schema(struct alx_parser_state const *const p,sqlite3 *db);
void alx_string_free(struct alx_string *const string);
struct alx_string alx_string_new(struct alx_parser_state *const p);
int alx_string_unsafe_end(struct alx_string *const string);
void alx_string_unsafe_begin(struct alx_string *const string,size_t const additional);
void alx_string_append_raw(struct alx_string *const string,char const *const data,size_t const size,size_t const num);
void alx_string_append_uint32_unsafe(struct alx_string *const string,uint32_t const new_val);
void alx_string_append_uint32_unsafe_old(struct alx_string *const string,uint32_t const tail);
void alx_string_json_finish(struct alx_string *const string);
void alx_string_append_byte(struct alx_string *const string,uint8_t const byte);
void alx_string_append_json_pop(struct alx_string *const string,size_t const indent,char const *const name,bool const bracket);
void alx_string_append_xml_pop(struct alx_string *const string,size_t const indent,char const *const escaped_name,bool const bracket);
void alx_string_append_json_push(struct alx_string *const string,size_t const indent,char const *const escaped_name,uint32_t const start_pos,uint32_t const final_pos,bool const bracket,bool const comma);
void alx_string_append_xml_push(struct alx_string *const string,size_t const indent,char const *const escaped_name,uint32_t const start_pos,uint32_t const final_pos,bool const bracket,bool const comma);
void alx_string_append_json_input_span(struct alx_string *const string,alx_offset const start_pos,alx_offset const final_pos);
void alx_string_append_fffd(struct alx_string *const string);
bool alx_string_xml_is_char(struct alx_string const *const string,uint32_t const cp);
bool alx_string_xml_is_escapee(struct alx_string const *const string,uint32_t const cp);
void alx_string_append_xml_input_span(struct alx_string *const string,alx_offset const start_pos,alx_offset const final_pos);
void alx_string_append_json_data(struct alx_string *const string,size_t const indent,char const *const escaped_name,uint32_t const start_pos,uint32_t const final_pos,bool const bracket,bool const comma);
void alx_string_append_xml_data(struct alx_string *const string,size_t const indent,char const *const escaped_name,uint32_t const start_pos,uint32_t const final_pos,bool const bracket,bool const comma);
uint32_t alx_htobe32(uint32_t const value);
uint32_t alx_uint32_lsb31(uint32_t const value);
uint32_t alx_uint32_lsb16(uint32_t const value);
uint32_t alx_uint32_msb16(uint32_t const value);
uint32_t alx_uint32_msb1(uint32_t const value);
size_t alx_max_size_t(size_t const lhs,size_t const rhs);
bool alx_offset_between_inclusive(alx_offset const pos,alx_offset const min_inclusive,alx_offset const max_inclusive);
uint8_t alx_char_to_uint8_t(char const value);
uint8_t alx_int_to_uint8_t(int const value);
uint32_t alx_size_t_to_uint32_t(size_t const value);
int64_t alx_size_t_to_int64_t(size_t const value);
int alx_size_t_to_int(size_t const value);
int64_t alx_uint32_t_to_int64_t(size_t const value);
uint32_t alx_ptrdiff_t_to_int(ptrdiff_t const value);
uint32_t alx_ptrdiff_t_to_size_t(ptrdiff_t const value);
void alx_ptr_to_uint32_t_pair(void const *const ptr,uint32_t *const first,uint32_t *const second);
void *alx_uint32_t_pair_to_ptr(uint32_t const first,uint32_t const second);
char *alx_void_ptr_to_char_ptr(void const *const void_ptr);
alx_input_class_id alx_utf8_state_to_input_class_id(alx_utf8_state const state);
void alx_validate_types(void);
void alx_unordered_vertex_set_insert(struct alx_unordered_vertex_set *const self,alx_vertex const vertex);
uint32_t alx_unordered_vertex_set_has(struct alx_unordered_vertex_set const *const self,alx_vertex const vertex);
void alx_unordered_vertex_set_clear(struct alx_unordered_vertex_set *const self);
void alx_unordered_vertex_set_swap(struct alx_unordered_vertex_set **const x,struct alx_unordered_vertex_set **const y);
ALX_INLINE uint32_t alx_utf8_decode(uint_fast32_t *const state,uint_fast32_t *const codep,uint_fast32_t const byte);
void alx_v32_clear(struct alx_v32 *const vector);
uint32_t *alx_v32_data(struct alx_v32 const *const vector);
size_t alx_v32_size(struct alx_v32 const *const vector);
uint32_t alx_v32_at(struct alx_v32 const *const vector,size_t const index);
void alx_v32_set_unsafe(struct alx_v32 const *const vector,size_t const index,uint32_t const value);
uint32_t *alx_v32_last_ptr(struct alx_v32 const *const vector);
uint32_t *alx_v32_first_ptr(struct alx_v32 const *const vector);
uint32_t alx_v32_get_last(struct alx_v32 const *const vector);
void alx_v32_inc_last(struct alx_v32 const *const vector);
void alx_v32_resize(struct alx_v32 *vector,size_t const size);
void alx_v32_zerofill(struct alx_v32 *vector,size_t const size);
void alx_v32_grow_and_push_back(struct alx_v32 *vector,uint32_t const value);
bool alx_v32_empty(struct alx_v32 *vector);
uint32_t alx_v32_pop(struct alx_v32 *vector);
void alx_v32_push_back(struct alx_v32 *vector,alx_vertex const vertex);
void alx_v32_push_back2(struct alx_v32 *const vector,uint32_t const v1,uint32_t const v2);
void alx_v32_push_back3(struct alx_v32 *const vector,uint32_t const v1,uint32_t const v2,uint32_t const v3);
void alx_v32_push_back4(struct alx_v32 *const vector,uint32_t const v1,uint32_t const v2,uint32_t const v3,uint32_t const v4);
void alx_v32_import(struct alx_v32 *const dst,struct alx_v32 const *const src);
void alx_v32_push_back_pair(struct alx_v32 *const vector,struct alx_vertexp_pair const *const pair);
void alx_v32_push_back_quad(struct alx_v32 *const vector,struct alx_vertexp_quad const *const quad);
struct alx_v32 alx_v32_new(struct alx_parser_state *const p,struct alx_v32 *const self,char const *const native_name,char const *const table_name,char const *const insert_template);
void alx_v32_free(struct alx_v32 *const vector);
bool alx_v32_is_sorted(struct alx_v32 const *const vector,size_t const skip_num,size_t const num,size_t const size,int(*cmp)(void const *,void const *));
uint32_t const *alx_v32_bsearch(struct alx_v32 const *const vector,size_t const skip_num,void const *const key,size_t const num,size_t const size,int(*cmp)(void const *,void const *));
void alx_upper_bound(void const *const key,void const *const base,size_t const num,size_t const size,int(*cmp)(void const *,void const *),void *const ptr,void **const upper);
void alx_lower_bound(void const *const key,void const *const base,size_t const num,size_t const size,int(*cmp)(void const *,void const *),void *const ptr,void **const lower);
void alx_equals_range(void const *const key,void const *const base,size_t const num,size_t const size,int(*cmp)(void const *,void const *),void **const lower,void **const upper);
uint32_t *alx_v32_bsearch_random(struct alx_v32 const *const vector,size_t const skip_num,void const *const key,size_t const num,size_t const size,int(*cmp)(void const *,void const *),struct alx_rng *const rng);
void alx_v32_equals_range(struct alx_v32 const *const vector,void const *const key,size_t const num,size_t const size,int(*cmp)(void const *,void const *),void **const lower,void **const upper);
void alx_v32_qsort_unless_sorted(struct alx_v32 const *const vector,size_t const skip_num,size_t const num,size_t const size,int(*cmp)(void const *,void const *));
void alx_v32_qsort(struct alx_v32 const *const vector,size_t const skip_num,size_t const num,size_t const size,int(*cmp)(void const *,void const *));
void alx_v32_qsort_whole(struct alx_v32 const *const vector,size_t const uint32_ts_per_item,int(*cmp)(void const *,void const *));
uint32_t *alx_v32_last_nonzero_ptr(struct alx_v32 const *const vector);
#define INTERFACE 0
#define EXPORT_INTERFACE 0
#define LOCAL_INTERFACE 0
#define EXPORT
#define LOCAL static
#define PUBLIC
#define PRIVATE
#define PROTECTED
